{"version":3,"sources":["ducks/weatherData.js","ducks/unit.js","utils/weatherUtils.js","thunks/handleRetrieveWeatherInfo.js","ducks/apiCallStatus.js","constants/apiInfo.js","utils/getStyles.js","components/Content/Temperature/Temperature.jsx","components/Content/Chart/WeatherChart.jsx","ducks/chartData.js","components/Content/WeatherCard/WeatherCard.jsx","constants/loaderClass.js","components/Content/Content.jsx","constants/status.js","components/WeatherApp.jsx","serviceWorker.js","reducers/index.js","index.js"],"names":["SET_WEATHER_DATA","CLEAR_WEATHER_DATA","setWeatherData","data","type","SET_UNIT_CELSIUS","SET_UNIT_FAHRENHEIT","transformResponse","daysData","comingDays","tomorrow","fourDates","i","setDate","getDate","month","getMonth","day","year","getFullYear","push","getNextDays","Date","daysMapped","dayDataFiltered","filter","item","dt_txt","includes","dayMapped","length","date","dt","moment","isValid","unix","format","temperature","temperatureForDayList","map","el","main","temp","averageTemperature","arr","reduce","a","b","dataForChart","text","value","avgtemp","toFixed","description","weather","handleRetrieveWeatherInfo","unit","location","url","BASE_URL","dispatch","fetch","then","response","json","transformedResponse","list","catch","error","contentClass","makeStyles","root","background","boxShadow","height","border","borderRadius","padding","marginTop","temperatureClass","theme","labelControl","paddingRight","weatherCardClass","maxWidth","title","fontSize","card","display","justifyContent","arrowRightClass","paddingBottom","arrowleftClass","paddingleft","cardContainer","margin","hocChain","compose","connect","actionCallWeatherApi","classes","React","useState","setValue","Fragment","Typography","variant","FormControl","component","className","formControl","RadioGroup","row","aria-label","name","onChange","event","target","FormControlLabel","control","Radio","color","label","labelPlacement","top","right","bottom","left","WeatherChart","props","width","window","innerWidth","state","chartData","this","ref","Component","SET_CHART_DATA","CLEAR_CHART_DATA","weatherData","actionSetChartingData","setChartData","useEffect","activeItemIndex","setActiveItemIndex","infiniteLoop","gutter","chevronWidth","numberOfCards","slidesToScroll","firstAndLastGutter","requestToChangeActive","outsideChevron","rightChevron","IconButton","leftChevron","index","Card","key","CardActionArea","onClick","CardContent","gutterBottom","loaderClass","css","apiCallStatus","class","size","loading","WeatherApp","Boolean","hostname","match","combineReducers","action","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.a8460040.chunk.js","sourcesContent":["export const SET_WEATHER_DATA = 'modules/weather-app/SET_WEATHER_DATA';\nexport const CLEAR_WEATHER_DATA = 'modules/weather-app/CLEAR_WEATHER_DATA';\n\nexport const setWeatherData = data => ({\n    type: SET_WEATHER_DATA,\n    data,\n});\n\nexport const clearWeatherData = () => ({\n    type: CLEAR_WEATHER_DATA,\n});\n\nexport const weatherDataReducer = (state = {}, action = { type: 'NULL_ACTION'}) => {\n    switch (action.type){\n        case SET_WEATHER_DATA:\n            return action.data;\n        case CLEAR_WEATHER_DATA:\n            return {};\n        default:\n            return state;               \n    }\n};","import { \n    CELSIUS_UNIT, FAHRENHEIT_UNIT\n} from '../constants/apiInfo';\n\nexport const SET_UNIT_CELSIUS = 'modules/weather-app/SET_UNIT_CELSIUS';\nexport const SET_UNIT_FAHRENHEIT = 'modules/weather-app/SET_UNIT_FAHRENHEIT';\n\nexport const setUnitCelsius = () => ({\n    type: SET_UNIT_CELSIUS,\n});\n\nexport const setUnitFahrenheit = () => ({\n    type: SET_UNIT_FAHRENHEIT,\n});\n\nexport const unitReducer = (state = '', action = { type: 'NULL_ACTION'}) => {\n    switch (action.type){\n        case SET_UNIT_CELSIUS:\n            return CELSIUS_UNIT;\n        case SET_UNIT_FAHRENHEIT:\n            return FAHRENHEIT_UNIT;\n        default:\n            return state;               \n    }\n};","import moment from 'moment';\n\n// Returns an array containing the next 5 days dates in format yyyy-mm-dd\nexport const getNextDays = (tomorrow) => {\n    var fourDates = [];\n    for(var i=0; i<5; i++) {\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        var month = tomorrow.getMonth() + 1;\n        var day = tomorrow.getDate();\n        var year = tomorrow.getFullYear();\n\n        if (month < 10) { month = \"0\" + month } \n        if (day < 10) { day = \"0\" + day }\n        fourDates.push(year + \"-\" + month + \"-\" + day);\n    }  \n    return fourDates;\n}\n\n//Return date in format ddd D MMMM\nexport const formatDate = (date) => {\n  if (date && moment(date).isValid()) {\n    return moment.unix(date).format('ddd D MMMM');\n  }\n  return '';\n}\n\n//Return average of an array\nexport const getAverageTemperature = arr => arr.reduce((a, b) => a + b, 0 ) / arr.length;\n\n//Return new object which will contain average temperature, date and list of temperature for that whole day\nexport const transformResponse = (daysData) => {\n    var comingDays = getNextDays(new Date());\n    var daysMapped = [];\n    for (let i=0; i<5; i++) { \n      var dayDataFiltered = daysData.filter(item => item.dt_txt.includes(comingDays[i]));\n      var dayMapped = {};\n      if(dayDataFiltered && dayDataFiltered.length > 0){\n        dayMapped.date = formatDate(dayDataFiltered[0].dt);\n        dayMapped.temperature = {};\n        const temperatureForDayList = dayDataFiltered.map(el => { return el.main.temp});\n        const averageTemperature = getAverageTemperature(temperatureForDayList);\n        const dataForChart = dayDataFiltered.map(el => { \n          return {\n            text: moment(el.dt_txt).format('HH:mm'),\n            value : el.main.temp\n          }\n        });\n        dayMapped.temperature.avgtemp = averageTemperature.toFixed(2);\n        dayMapped.dataForChart = dataForChart;\n        dayMapped.description = dayDataFiltered[0].weather[0].description;\n        daysMapped.push(dayMapped);\n      }  \n    }\n    return daysMapped;\n}","import { \n    setApiCallStatusError, setApiCallStatusLoading, setApiCallStatusSuccess\n} from '../ducks/apiCallStatus';\nimport { setWeatherData } from '../ducks/weatherData';\nimport { setUnitCelsius, setUnitFahrenheit } from '../ducks/unit';\nimport { \n    BASE_URL, COUNT, APP_ID, TEMPERATURE_IN_FAHRENHEIT\n} from '../constants/apiInfo';\nimport { transformResponse } from '../utils/weatherUtils';\n\nconst handleRetrieveWeatherInfo = (unit, location) => {\n    const url = BASE_URL+'?q='+location+'&APPID='+APP_ID+'&cnt='+COUNT+'&units='+unit;\n    return async (dispatch) =>{\n        dispatch(setApiCallStatusLoading());\n        fetch(url)\n        .then(response => response.json())\n        .then(data => {\n            const transformedResponse = transformResponse(data.list);\n            dispatch(setWeatherData(transformedResponse));\n            unit === TEMPERATURE_IN_FAHRENHEIT ? dispatch(setUnitFahrenheit()) : dispatch(setUnitCelsius());\n            dispatch(setApiCallStatusSuccess());\n        })\n        .catch(error => dispatch(setApiCallStatusError()));\n    }\n}\n\nexport default handleRetrieveWeatherInfo;","import { \n    API_CALL_STATUS_SUCCESS, API_CALL_STATUS_ERROR, API_CALL_STATUS_LOADING\n} from '../constants/status';\n\nexport const SET_API_CALL_STATUS_SUCCESS = 'modules/weather-app/SET_API_CALL_STATUS_SUCCESS';\nexport const SET_API_CALL_STATUS_LOADING = 'modules/weather-app/SET_API_CALL_STATUS_LOADING';\nexport const SET_API_CALL_STATUS_ERROR = 'modules/weather-app/SET_API_CALL_STATUS_ERROR';\n\nexport const setApiCallStatusSuccess = () => ({\n    type: SET_API_CALL_STATUS_SUCCESS,\n});\n\nexport const setApiCallStatusLoading = () => ({\n    type: SET_API_CALL_STATUS_LOADING,\n});\n\nexport const setApiCallStatusError = () => ({\n    type: SET_API_CALL_STATUS_ERROR,\n});\n\nexport const apiCallStatusReducer = (state = '', action = { type: 'NULL_ACTION'}) => {\n    switch (action.type){\n        case SET_API_CALL_STATUS_SUCCESS:\n            return API_CALL_STATUS_SUCCESS;\n        case SET_API_CALL_STATUS_LOADING:\n            return API_CALL_STATUS_LOADING;\n        case SET_API_CALL_STATUS_ERROR:\n            return API_CALL_STATUS_ERROR;\n        default:\n            return state;               \n    }\n};","export const APP_ID = \"75f972b80e26f14fe6c920aa6a85ad57\";\nexport const TEMPERATURE_IN_FAHRENHEIT = \"Imperial\";\nexport const TEMPERATURE_IN_CELSIUS = \"Metric\";\nexport const COUNT = 40;\nexport const BASE_URL = \"https://api.openweathermap.org/data/2.5/forecast\";\nexport const DEFAULT_LOCATION = \"Munich,de\";\nexport const CELSIUS_UNIT = \"°C\";\nexport const FAHRENHEIT_UNIT = \"°F\";","import { makeStyles } from '@material-ui/core/styles';\n\nexport const contentClass = makeStyles({\n    root: {\n        background: 'linear-gradient(45deg, #ccffee 55%, #FF8E53 90%)',\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n        height: 500,\n        border: 0,\n        borderRadius: 3,\n        padding: '0 30px',\n        marginTop: 50,\n    },\n});\n\nexport const temperatureClass = makeStyles((theme) => ({\n    labelControl: {\n        paddingRight: 180,\n    }\n}));\n\nexport const weatherCardClass = makeStyles({\n    root: {\n      maxWidth: 165,\n      marginTop: 10,\n    },\n    title: {\n      fontSize: 14,\n    },\n    card: {\n      display: 'flex',\n      justifyContent: 'space-between',\n    },\n    arrowRightClass: {\n      paddingBottom: '50px',\n      paddingRight: '5px',\n    },\n    arrowleftClass: {\n      paddingRight: '100px',\n      paddingleft: '125px',\n    },\n    cardContainer: {\n        maxWidth:'596px' ,\n        margin:'0 auto',\n    }\n});\n  ","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport Typography from '@material-ui/core/Typography';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { temperatureClass } from '../../../utils/getStyles';\nimport handleRetrieveWeatherInfo from '../../../thunks/handleRetrieveWeatherInfo';\nimport { TEMPERATURE_IN_FAHRENHEIT, DEFAULT_LOCATION, TEMPERATURE_IN_CELSIUS } from '../../../constants/apiInfo';\n\nconst Temperature = ({ actionCallWeatherApi }) => {\n  const classes = temperatureClass();\n  const [value, setValue] = React.useState('F');\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n    if(event.target.value === 'C'){\n      actionCallWeatherApi(TEMPERATURE_IN_CELSIUS, DEFAULT_LOCATION);\n    }else{\n      actionCallWeatherApi(TEMPERATURE_IN_FAHRENHEIT, DEFAULT_LOCATION);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\">\n        {DEFAULT_LOCATION}\n      </Typography>\n      <hr/>\n      <FormControl component=\"fieldset\" className={classes.formControl}>\n        <RadioGroup row aria-label=\"position\" name=\"position\" value={value} onChange={handleChange}>\n          <FormControlLabel\n            value=\"C\"\n            control={<Radio color=\"primary\" />}\n            label=\"Celcius\"\n            labelPlacement=\"end\"\n            className={classes.labelControl}\n          />\n          <FormControlLabel \n              value=\"F\" \n              control={<Radio color=\"primary\" />} \n              label=\"Fahrenheit\" \n              labelPlacement=\"end\"\n          />\n        </RadioGroup>\n      </FormControl>\n    </React.Fragment>\n  );\n}\n\nTemperature.propTypes = {\n  actionCallWeatherApi: PropTypes.func.isRequired,\n};\n\nconst mapDispatchAsProps = dispatch =>{\n  return {\n      actionCallWeatherApi: (temperature, location) => dispatch(handleRetrieveWeatherInfo(temperature, location)),\n  };\n}\n\nconst hocChain = compose(\n  connect(null, mapDispatchAsProps),\n);\n\nexport { Temperature as TestableTemperature};\n\nexport default hocChain(Temperature);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport BarChart from 'react-bar-chart';\n   \nconst margin = {top: 20, right: 20, bottom: 30, left: 40};\n   \nclass WeatherChart extends React.Component{\n    constructor(props) {\n      super(props);\n      let width = window.innerWidth;\n      if (width > 768) {\n        this.state = {\n          width: 500\n        }\n      }else{\n        this.state = {\n          width: 300\n        }\n      } \n    }\n \n    render() {\n      const { chartData } = this.props;\n      return (\n          <div ref='root'>\n            <BarChart \n              width={this.state.width}\n              height={200}\n              margin={margin}\n              data={chartData}\n            />\n          </div>\n      );\n    }\n};\n\nWeatherChart.propTypes = {\n  chartData: PropTypes.arrayOf(PropTypes.shape({\n    text: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired,\n  })),\n};\n\nconst mapStateToProps = state => ({\n  chartData: state.chartData,\n});\n\nexport { WeatherChart as TestableWeatherChart };\n\nexport default connect(mapStateToProps)(WeatherChart);","export const SET_CHART_DATA = 'modules/weather-app/SET_CHART_DATA';\nexport const CLEAR_CHART_DATA = 'modules/weather-app/CLEAR_CHART_DATA';\n\nexport const setChartData = data => ({\n    type: SET_CHART_DATA,\n    data,\n});\n\nexport const clearChartData = () => ({\n    type: CLEAR_CHART_DATA,\n});\n\nexport const chartDataReducer = (state = [], action = { type: 'NULL_ACTION'}) => {\n    switch (action.type){\n        case SET_CHART_DATA:\n            return action.data;\n        case CLEAR_CHART_DATA:\n            return [];\n        default:\n            return state;               \n    }\n};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport ItemsCarousel from 'react-items-carousel';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport { weatherCardClass } from '../../../utils/getStyles';\nimport WeatherChart from '../Chart/WeatherChart';\nimport { setChartData } from '../../../ducks/chartData';\n\nconst WeatherCard = ({ weatherData, unit, actionSetChartingData }) => {\n  React.useEffect(() => {\n    actionSetChartingData(weatherData[0].dataForChart);\n  });\n  const classes = weatherCardClass();\n  const [activeItemIndex, setActiveItemIndex] = useState(0);\n  const handleClick = (data) => {\n    actionSetChartingData(data.dataForChart);\n  }\n  return (\n    <React.Fragment>\n      <div className={classes.card}>\n        <div className={`weather-card ${classes.cardContainer}`}>\n          <ItemsCarousel\n            infiniteLoop={false}\n            gutter={1}\n            chevronWidth={60}\n            numberOfCards={3}\n            slidesToScroll={2}\n            firstAndLastGutter={false}\n            requestToChangeActive={setActiveItemIndex}\n            activeItemIndex={activeItemIndex}\n            outsideChevron ={true}\n            rightChevron={\n              <IconButton color=\"primary\" aria-label=\"forward\" component=\"span\" >\n                <ArrowForwardIosIcon color=\"primary\"/>\n              </IconButton>\n            }\n            leftChevron={\n              <IconButton color=\"primary\" aria-label=\"backward\" component=\"span\"\n              >\n                <ArrowBackIosIcon color=\"primary\"/>\n              </IconButton>\n            }\n          >  \n            {\n              weatherData.map( (day, index) => ( \n                <Card className={classes.root} key={index}>\n                  <CardActionArea onClick={() => handleClick(day)}>\n                    <CardContent>\n                      <Typography variant=\"h6\" component=\"h2\">\n                          {day.date}\n                      </Typography>\n                      <Typography className={classes.title} color=\"textSecondary\">\n                          Avg Temp:\n                      </Typography>\n                      <Typography variant=\"h6\" component=\"h2\">\n                          {day.temperature.avgtemp} {unit}\n                      </Typography>\n                      <Typography className={classes.title} color=\"textSecondary\">\n                          Weather:\n                      </Typography>\n                      <Typography variant=\"subtitle2\" gutterBottom>\n                      {day.description}\n                      </Typography>\n                    </CardContent>\n                  </CardActionArea> \n                </Card>\n              ))\n            }\n          </ItemsCarousel>\n        </div>\n      </div>\n      <WeatherChart />\n    </React.Fragment>  \n  )\n}\n\nWeatherCard.propTypes = {\n  unit: PropTypes.string.isRequired,\n  weatherData: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    temperature: PropTypes.shape({\n      avgtemp: PropTypes.string.isRequired,\n    }),\n    dataForChart: PropTypes.arrayOf(PropTypes.shape({\n      text: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n    })),\n  })).isRequired,\n  actionSetChartingData: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  weatherData: state.weatherData,\n  unit: state.unit,\n});\n\nconst mapDispatchAsProps = dispatch =>{\n  return {\n      actionSetChartingData: data => dispatch(setChartData(data)),\n  };\n}\n\nconst hocChain = compose(\n  connect(mapStateToProps, mapDispatchAsProps),\n);\n\nexport { WeatherCard as TestableWeatherCard };\n\nexport default hocChain(WeatherCard);","import { css } from \"@emotion/core\";\n\nexport const loaderClass = css`\n  display: block;\n  margin: 170px auto;\n  border-color: red;\n`;\nexport const loaderSize = 60;\nexport const loaderColor = '#123abc';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport RingLoader from \"react-spinners/RingLoader\";\nimport Temperature from './Temperature/Temperature';\nimport WeatherCard from './WeatherCard/WeatherCard';\nimport { contentClass } from '../../utils/getStyles';\nimport { API_CALL_STATUS_LOADING, API_CALL_STATUS_SUCCESS } from '../../constants/status';\nimport { loaderClass, loaderSize, loaderColor } from '../../constants/loaderClass';\n\nconst Content = ({apiCallStatus}) => {\n    const classes = contentClass();\n    return (\n        <div class=\"container\">\n            <div class=\"row\">\n                <div className=\"col-md-2\" />\n                <div class=\"col-md-8\">\n                    <Card className={`root-container ${classes.root}`}>\n                        <CardContent>\n                            <RingLoader\n                                css={loaderClass}\n                                size={loaderSize}\n                                color={loaderColor}\n                                loading={apiCallStatus === API_CALL_STATUS_LOADING ? true: false}\n                            />\n                            <Temperature />\n                            {\n                                apiCallStatus === API_CALL_STATUS_SUCCESS && \n                                <WeatherCard />    \n                            }\n                        </CardContent>\n                    </Card>\n                </div>\n                <div className=\"col-md-2\" />\n            </div>\n        </div>            \n    )\n}\n\nContent.propTypes = {\n    apiCallStatus: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    apiCallStatus: state.apiCallStatus,\n});\n\nexport { Content as TestableContent };\n\nexport default connect(mapStateToProps)(Content);","export const API_CALL_STATUS_SUCCESS = \"SUCCESS\";\nexport const API_CALL_STATUS_LOADING = \"LOADING\";\nexport const API_CALL_STATUS_ERROR = \"ERROR\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport handleRetrieveWeatherInfo from '../thunks/handleRetrieveWeatherInfo';\nimport Content from '../components/Content/Content';\nimport { TEMPERATURE_IN_FAHRENHEIT, DEFAULT_LOCATION } from '../constants/apiInfo';\n\nclass WeatherApp extends React.Component{\n    componentDidMount(){\n        const { actionCallWeatherApi } = this.props;\n        actionCallWeatherApi(TEMPERATURE_IN_FAHRENHEIT, DEFAULT_LOCATION);\n    }\n    \n    render(){\n        return (\n            <Content />\n        )\n    }\n}\n\nWeatherApp.propTypes = {\n    actionCallWeatherApi: PropTypes.func.isRequired,\n};\n\nconst mapDispatchAsProps = dispatch =>{\n    return {\n        actionCallWeatherApi: (temperature, location) => dispatch(handleRetrieveWeatherInfo(temperature, location)),\n    };\n}\n\nconst hocChain = compose(\n    connect(null, mapDispatchAsProps),\n);\n\nexport { WeatherApp as TestableWeatherApp };\n\nexport default hocChain(WeatherApp);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\nimport { apiCallStatusReducer as apiCallStatus } from '../ducks/apiCallStatus';\nimport { weatherDataReducer as weatherData } from '../ducks/weatherData';\nimport { unitReducer as unit } from '../ducks/unit';\nimport { chartDataReducer as chartData } from '../ducks/chartData';\n\nexport default combineReducers({\n    apiCallStatus,\n    weatherData,\n    unit,\n    chartData,\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport thunk from 'redux-thunk';\nimport WeatherApp from './components/WeatherApp';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './reducers/index';\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <WeatherApp />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}